% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile_grammar.R
\name{compile_grammar}
\alias{compile_grammar}
\title{Compile a Nearley grammar string and return parser and railroad functions}
\usage{
compile_grammar(nearley_string)
}
\arguments{
\item{nearley_string}{character string of a Nearley grammar or a path to a .ne file}
}
\description{
Compile a Nearley grammar string and return parser and railroad functions
}
\examples{
# 'Hello world' demo:
parser <- compile_grammar('sequence -> "x" "y" "z"')
parser$parse_str("xyz")

# A more complete demo:
# 1. Read a lexicon and group lines using zoo:na.locf0()

lexicon_df <-
      system.file("extdata", "error-french.txt", package = "tidylex") \%>\%
      read_lexicon(regex = "\\\\\\\\([a-z]+)", into  = "code") \%>\%
      mutate(lx_start = ifelse(code == "lx", line, NA) \%>\% zoo::na.locf0())

# 2. Define and compile a Nearley grammar to test code sequences
headword_parser <-  compile_grammar('
   headword -> "lx" "ps" "de" example:?

   example -> "xv" "xe"
')

# 3. For each 'lx_start' group, test the sequence of codes against grammar
lexicon_df \%>\%
    group_by(lx_start) \%>\%
    mutate(code_ok = headword_parser$parse_str(code, return_labels = TRUE))

}
